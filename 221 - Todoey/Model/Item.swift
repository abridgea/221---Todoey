//
//  Item.swift
//  221 - Todoey
//
//  Created by KG Sasaki on 1/20/19.
//  Copyright Â© 2019 ABRIDGEA. All rights reserved.
//

import Foundation

// This class was used earlier in the module. Then got deleted when (probably) Core Data was introduced.
// It was then once again brought back when Realm was introduced. That part of the code is shown below after all these lines commented out.


// NTS: Encodable and Decodable together can be written as Codable (Swift 4).

// NTS
// After creating DataModel file, this class could be deleted.
// Note: In the DataModel file, be sure to do the following:
// Under the Data Model Inspector, goto Class/Module, and switch the selection from
// "Global namespace" to "Current Product Module". When the database become more
// complicated, especially when the app uses multi-threading, not making this switch may cause the app to have errors.
//
// Under Class/Module is another drop-down for Codegen. There are three options:
// 1) Manual/None
// 2) Class Definition
// 3) Category/Extension
// The default is Class/Extension, and this is when Xcode generates a class and extension deep in the file hierarchy. root/Users/<User>/Library (if this is hidden, type "chflags nohidden ~/Library/" in Terminal)/Developer/Xode/DrivedData/<App Name>/Build/Intermediates/<App Name>/Debug-iphonesimulator/<App Name>/DerivedSources/CoreDataGenerated/DataModel. If CoreDataGenerated is not here, that means the app has not been run, yet.
// There are 3 files under DataModel. The ones with the <app name> as a part of the file name are the class and extensions generated by Xcode. The class declaration is generated only once, and it does not get modified unless a new entity (similar to saying 'class' in database talk) is added or deleted. The extesion is re-generated many times as Xcode sees fit. So, adding code here will get wiped eventually. Both of these files are NOT good places to put custom codes. This option is probably second most commonly used, but it is the easiest to use.
// If additional code needs to be added, select the Category/Extension option. With this option, the programmer needs to create classes that are identically named to the Entities. Xcode will then automatically like up the Classes and Entities. This option is probably the most often used option.
// When creating a class, inherit from NSManagedObject (just like Xcode does when Class/Extension option is selected.)
// Manual/None option means Xcode does not create any files, and the programmer needs to code everything. This option is hardly used.


//class Item : Encodable, Decodable {
//class Item : Codable {
//	// For this class to be Encodable, all the properties must have standard data types.
//	var title	: String
//	var done	: Bool
//
//	init(title: String, done: Bool) {
//		self.title = title
//		self.done  = done
//	}
//}

// --------------------------------------------------
// The following section is the code used with Realm.

import RealmSwift

// The superclass Object is a Realm class, used to define Realm model objects (e.g, Item).
// I kept DataModel.xcdatamodeld, used with Core Data, because this project is for learning. But that
// resulted in Xcode saying 'Item' is redeclared. That's because Item was defined in DataModel.xcdatamodeld,
// and for Class/Codegen under Data Model Inspector, "Class Definition" was selected. That means Xcode
// generated necessary code to define Item class in the background. So, when Realm was added, that option
// was set to "Manual/None" to keep Xcode from generating the code in the background.
class Item : Object {

	@objc dynamic var title : String = ""		// "@objc" modifier and "dynamic" keyword are needed to work with Realm.
	@objc dynamic var done : Bool = false
	
}
